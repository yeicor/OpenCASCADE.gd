<?xml version="1.0" encoding="UTF-8" ?>
<class name="ocgd_TopoDS_Shape" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		OpenCASCADE shape wrapper for Godot.
	</brief_description>
	<description>
		Wrapper class to expose the OpenCASCADE TopoDS_Shape to Godot. Describes a shape which references an underlying shape with the potential to be given a location and an orientation. Has a location for the underlying shape, giving its placement in the local coordinate system. Has an orientation for the underlying shape, in terms of its geometry (as opposed to orientation in relation to other shapes).

		Note: A Shape is empty if it references an underlying shape which has an empty list of shapes.

		This is the fundamental building block for all geometric operations in OpenCASCADE.gd. All CAD shapes, whether primitives or complex assemblies, are represented as TopoDS_Shape objects.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="complemented" qualifiers="const">
			<return type="ocgd_TopoDS_Shape" />
			<description>
				Returns the complement of the orientation.
			</description>
		</method>
		<method name="empty_copy" qualifiers="const">
			<return type="ocgd_TopoDS_Shape" />
			<description>
				Creates a new empty copy of this shape.
			</description>
		</method>
		<method name="hash_code" qualifiers="const">
			<return type="int" />
			<description>
				Returns a hash code value for this shape.
			</description>
		</method>
		<method name="is_equal" qualifiers="const">
			<return type="bool" />
			<param index="0" name="other" type="ocgd_TopoDS_Shape" />
			<description>
				Returns true if two shapes are equal, i.e. if they share the same TShape with the same Locations and Orientations.
			</description>
		</method>
		<method name="is_null" qualifiers="const">
			<return type="bool" />
			<description>
				Returns true if this shape is null. In other words, it references no underlying shape with the potential to be given a location and an orientation.
			</description>
		</method>
		<method name="is_same" qualifiers="const">
			<return type="bool" />
			<param index="0" name="other" type="ocgd_TopoDS_Shape" />
			<description>
				Returns true if two shapes are the same, i.e. if they share the same TShape with the same Locations. Orientations may differ.
			</description>
		</method>
		<method name="is_valid" qualifiers="const">
			<return type="bool" />
			<description>
				Returns true if the shape is not null and has the correct type.
			</description>
		</method>
		<method name="located" qualifiers="const">
			<return type="ocgd_TopoDS_Shape" />
			<param index="0" name="loc" type="Vector3" />
			<description>
				Creates a copy of this shape with the same TShape and Orientation but with a different Location.
			</description>
		</method>
		<method name="location" qualifiers="const">
			<return type="Vector3" />
			<description>
				Returns the shape local coordinate system location.
			</description>
		</method>
		<method name="moved" qualifiers="const">
			<return type="ocgd_TopoDS_Shape" />
			<param index="0" name="loc" type="Vector3" />
			<description>
				Returns a shape similar to this one with the local coordinate system set to the identity transformation.
			</description>
		</method>
		<method name="nullify">
			<return type="void" />
			<description>
				Destroys the reference to the underlying shape stored in this shape. As a result, this shape becomes null.
			</description>
		</method>
		<method name="orientation" qualifiers="const">
			<return type="int" />
			<description>
				Returns the orientation of the shape. Use the Orientation enum constants for comparison.
			</description>
		</method>
		<method name="oriented" qualifiers="const">
			<return type="ocgd_TopoDS_Shape" />
			<param index="0" name="orient" type="int" />
			<description>
				Creates a copy of this shape with the same TShape and Location but with a different Orientation.
			</description>
		</method>
		<method name="reversed" qualifiers="const">
			<return type="ocgd_TopoDS_Shape" />
			<description>
				Returns the complement of the orientation, using the orientation reversal map.
			</description>
		</method>
		<method name="set_orientation">
			<return type="void" />
			<param index="0" name="orient" type="int" />
			<description>
				Sets the orientation of the shape. Use the Orientation enum constants.
			</description>
		</method>
		<method name="shape_type" qualifiers="const">
			<return type="int" />
			<description>
				Returns the type of the shape, returns SHAPE if the shape is null. Use the ShapeType enum constants for comparison.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="COMPOUND" value="0" enum="ShapeType">
			A compound shape containing multiple shapes.
		</constant>
		<constant name="COMPSOLID" value="1" enum="ShapeType">
			A composite solid made of multiple solids.
		</constant>
		<constant name="SOLID" value="2" enum="ShapeType">
			A solid shape with volume.
		</constant>
		<constant name="SHELL" value="3" enum="ShapeType">
			A shell composed of connected faces.
		</constant>
		<constant name="FACE" value="4" enum="ShapeType">
			A face bounded by wires.
		</constant>
		<constant name="WIRE" value="5" enum="ShapeType">
			A wire composed of connected edges.
		</constant>
		<constant name="EDGE" value="6" enum="ShapeType">
			An edge connecting two vertices.
		</constant>
		<constant name="VERTEX" value="7" enum="ShapeType">
			A vertex (point) in 3D space.
		</constant>
		<constant name="SHAPE" value="8" enum="ShapeType">
			Generic shape type (used for null shapes).
		</constant>
		<constant name="FORWARD" value="0" enum="Orientation">
			Forward orientation.
		</constant>
		<constant name="REVERSED" value="1" enum="Orientation">
			Reversed orientation.
		</constant>
		<constant name="INTERNAL" value="2" enum="Orientation">
			Internal orientation.
		</constant>
		<constant name="EXTERNAL" value="3" enum="Orientation">
			External orientation.
		</constant>
	</constants>
</class>
