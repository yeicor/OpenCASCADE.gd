/**
 * This file is generated by the binding generator.
 * It implements the GDExtension registration hooks and the entry point for the module.
 *
 * The entry symbol referenced by your .gdextension file is:
 *   ocgd_library_init
 */

#include "register_types.h"

#include <godot_cpp/godot.hpp>
#include <godot_cpp/core/class_db.hpp>

#include "ocgd_STEPCAFControl_Reader.hxx"
#include "ocgd_TopoDS_Shape.hxx"
#include "ocgd_TopExp_Explorer.hxx"
#include "ocgd_BRepMesh_IncrementalMesh.hxx"
#include "ocgd_MeshDataExtractor.hxx"
#include "ocgd_STLExporter.hxx"
#include "ocgd_ShapeAnalyzer.hxx"
#include "ocgd_IGESReader.hxx"
#include "ocgd_PrimitiveShapes.hxx"
#include "ocgd_BooleanOperations.hxx"
#include "ocgd_AdvancedMeshExporter.hxx"
#include "ocgd_TopologyAnalyzer.hxx"
#include "ocgd_CADFileImporter.hxx"
#include "ocgd_SurfaceUtils.hxx"

using namespace godot;

void ocgd_initialize_module(ModuleInitializationLevel p_level) {
    if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
        return;
    }

    // Register wrapped classes
    GDREGISTER_CLASS(ocgd_STEPCAFControl_Reader);
    GDREGISTER_CLASS(ocgd_TopoDS_Shape);
    GDREGISTER_CLASS(ocgd_TopExp_Explorer);
    GDREGISTER_CLASS(ocgd_BRepMesh_IncrementalMesh);
    GDREGISTER_CLASS(ocgd_MeshDataExtractor);
    GDREGISTER_CLASS(ocgd_STLExporter);
    GDREGISTER_CLASS(ocgd_ShapeAnalyzer);
    GDREGISTER_CLASS(ocgd_IGESReader);
    GDREGISTER_CLASS(ocgd_PrimitiveShapes);
    GDREGISTER_CLASS(ocgd_BooleanOperations);
    GDREGISTER_CLASS(ocgd_AdvancedMeshExporter);
    GDREGISTER_CLASS(ocgd_TopologyAnalyzer);
    GDREGISTER_CLASS(ocgd_CADFileImporter);
    GDREGISTER_CLASS(ocgd_SurfaceUtils);
}

void ocgd_uninitialize_module(ModuleInitializationLevel p_level) {
    if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
        return;
    }
    // Teardown logic (if any) goes here.
}

extern "C" {
    GDExtensionBool GDE_EXPORT ocgd_ai_library_init(
        GDExtensionInterfaceGetProcAddress p_get_proc_address,
        const GDExtensionClassLibraryPtr p_library,
        GDExtensionInitialization *r_initialization
    ) {
        godot::GDExtensionBinding::InitObject init_obj(
            p_get_proc_address, p_library, r_initialization
        );

        init_obj.register_initializer(ocgd_initialize_module);
        init_obj.register_terminator(ocgd_uninitialize_module);
        init_obj.set_minimum_library_initialization_level(MODULE_INITIALIZATION_LEVEL_SCENE);

        return init_obj.init();
    }
}
