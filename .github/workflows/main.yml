on:
  workflow_call:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  merge_group:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target:
          [ # https://docs.godotengine.org/en/stable/about/system_requirements.html
            { platform: "linux", arch: "x86_64", os: "ubuntu-24.04", vcpkg_triplet: "x64-linux" },
            { platform: "linux", arch: "x86_32", os: "ubuntu-24.04", vcpkg_triplet: "x86-linux" },
            { platform: "linux", arch: "arm64", os: "ubuntu-24.04-arm", vcpkg_triplet: "arm64-linux" },
            { platform: "linux", arch: "arm32", os: "ubuntu-24.04-arm", vcpkg_triplet: "arm-linux" },
            { platform: "windows", arch: "x86_64", os: "windows-2025", vcpkg_triplet: "x64-mingw-static" },
            { platform: "windows", arch: "x86_32", os: "windows-2025", vcpkg_triplet: "x86-mingw-static" },
            { platform: "windows", arch: "arm64", os: "windows-2025", vcpkg_triplet: "arm64-mingw-static" },
            { platform: "macos", arch: "arm64", os: "macos-15", vcpkg_triplet: "arm64-osx" },
            { platform: "macos", arch: "x86_64", os: "macos-15", vcpkg_triplet: "x64-osx" },
            { platform: "web", arch: "wasm32", os: "ubuntu-24.04", vcpkg_triplet: "wasm32-emscripten-pic" },
            { platform: "android", arch: "x86_64", os: "ubuntu-24.04", vcpkg_triplet: "x64-android" },
            { platform: "android", arch: "x86_32", os: "ubuntu-24.04", vcpkg_triplet: "x86-android" },
            { platform: "android", arch: "arm64", os: "ubuntu-24.04", vcpkg_triplet: "arm64-android" },
            { platform: "android", arch: "arm32", os: "ubuntu-24.04", vcpkg_triplet: "arm-android" },
            { platform: "ios", arch: "arm64", os: "macos-15", vcpkg_triplet: "arm64-ios" },
          ]
        target-type: [ "template_debug" ] # TODO: , "template_release"
        float-precision: [ "single" ] # TODO: , "double"

    runs-on: "${{ matrix.target.os }}"
    steps:
      - uses: "actions/checkout@v4"
        with:
          submodules: "recursive"

      # <Triplet-specific setup>
      - if: "matrix.target.platform == 'linux' && matrix.target.arch == 'x86_32'"
        run: "sudo apt-get update && sudo apt-get install -y gcc-multilib g++-multilib"
      - if: "matrix.target.platform == 'linux' && matrix.target.arch == 'arm32'"
        run: "sudo apt-get update && sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf && echo CC='arm-linux-gnueabihf-gcc' >> $GITHUB_ENV && echo CXX='arm-linux-gnueabihf-g++' >> $GITHUB_ENV"
      - if: "matrix.target.os == 'ubuntu-24.04' || matrix.target.os == 'ubuntu-24.04-arm'"
        run: "sudo apt-get update && sudo apt-get install -y libx11-dev libgl1-mesa-dev libfontconfig-dev"
      - if: "matrix.target.platform == 'windows'"
        uses: "egor-tensin/setup-mingw@v2"
        with:
          version: "12.2.0" # It seems like updates are broken (follow godot-cpp)
      - if: "matrix.target.os == 'macos-15'"
        run: "brew install autoconf automake autoconf-archive"
      - if: "matrix.target.platform == 'web'"
        uses: "mymindstorm/setup-emsdk@v14"
        with:
          version: "4.0.12" # More recent than Godot's default, since we need allow-multiple-definition support
      - if: "matrix.target.platform == 'web'"
        run: "echo 'cmake_extra_args=-DGODOTCPP_THREADS=OFF' >> $GITHUB_ENV && echo 'LDFLAGS=-Wl,-allow-multiple-definition' >> $GITHUB_ENV"
      - if: "matrix.target.platform == 'android'"
        uses: "nttld/setup-ndk@v1"
        id: "setup-ndk"
        with:
          ndk-version: "r23c" # Same as https://github.com/godotengine/godot/blob/<GODOT_VERSION>/platform/android/detect.py
          link-to-sdk: true
      - if: "matrix.target.platform == 'android'"
        run: 'echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV'
      # </Triplet-specific setup>

      # <Cache restoration>
      - uses: "actions/cache/restore@v4"
        id: "scons-cache"
        with:
          key: "build-${{ matrix.target.platform }}-${{ matrix.target.arch }}-${{ matrix.float-precision }}-${{ matrix.target-type }}"
          path: "build" # When out of tree build is implemented, "build" can also be cached for even faster builds
      - uses: "actions/cache/restore@v4"
        id: "vcpkg-cache"
        with:
          key: "vcpkg-${{ matrix.target.vcpkg_triplet }}"  # Others don't matter for vcpkg
          path: ".vcpkg-cache"
      - shell: "bash"
        run: |
          ( [ -d .vcpkg-cache ] || mkdir .vcpkg-cache )
          if [ "${{ matrix.target.platform }}" == "windows" ]; then
            echo "VCPKG_DEFAULT_BINARY_CACHE=$(realpath .vcpkg-cache | sed -E 's#^/([a-z])/#\U\1:\\#I; s#/#\\#g')" >> $GITHUB_ENV;
          else
            echo "VCPKG_DEFAULT_BINARY_CACHE=$(realpath .vcpkg-cache)" >> $GITHUB_ENV;
          fi
      # </Cache restoration>

      # <Install and build>
#      - run: "scons target=${{ matrix.target-type }} platform=${{ matrix.target.platform }} arch=${{ matrix.target.arch }} precision=${{ matrix.float-precision }} disable_exceptions=no ${scons_extra_args}"
      - uses: "lukka/get-cmake@v4.1.0"
      - uses: "lukka/run-vcpkg@v11.5"
      - uses: "lukka/run-cmake@v10.8"
        with:
          configurePreset: "vcpkg-ninja"
          configurePresetAdditionalArgs: > # TODO: Set these appropriately...
            -DCMAKE_SYSTEM_NAME=${{ matrix.target.platform }}
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.target.arch }}
            -DCMAKE_BUILD_TYPE=${{ matrix.target-type }}
            -DGODOTCPP_PRECISION=${{ matrix.float-precision }}
            -DVCPKG_TARGET_TRIPLET=${{ matrix.target.vcpkg_triplet }}
            ${{ env.cmake_extra_args }}
          buildPreset: "vcpkg-ninja"
      # </Install and build>

      # <Cache saving (always)>
      - uses: "actions/cache/save@v4"
        if: "always()"
        with:
          key: "${{ steps.scons-cache.outputs.cache-primary-key }}"
          path: "build"
      - uses: "actions/cache/save@v4"
        if: "always()"
        with:
          key: "${{ steps.vcpkg-cache.outputs.cache-primary-key }}"
          path: ".vcpkg-cache"
      # </Cache saving (always)>

      # <Export artifacts>
      - uses: "actions/upload-artifact@v4"
        with:
          name: "OpenCASCADE.gd-${{ matrix.target.platform }}-${{ matrix.target.arch }}-${{ matrix.float-precision }}-${{ matrix.target-type }}"
          path: "demo/addons/OpenCASCADE.gd/**"
      - uses: "actions/upload-artifact@v4"
        with: # Build artifacts useful for debugging in a local environment
          name: "build-${{ matrix.target.platform }}-${{ matrix.target.arch }}-${{ matrix.float-precision }}-${{ matrix.target-type }}"
          path: ".scons-cache/\n.vcpkg-cache\n./vcpkg/"
      # </Export artifacts>
  merge:
    runs-on: "ubuntu-24.04"
    needs: "build"
    steps:
      - uses: "actions/upload-artifact/merge@v4"
        with:
          name: "OpenCASCADE.gd"
          pattern: "OpenCASCADE.gd-*"
          delete-merged: true