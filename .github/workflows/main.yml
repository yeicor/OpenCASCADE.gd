on:
  workflow_call:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  merge_group:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target:
          [ # https://docs.godotengine.org/en/stable/about/system_requirements.html
            { os: "ubuntu-24.04", vcpkg_triplet: "x64-linux" },
            { os: "ubuntu-24.04", vcpkg_triplet: "x86-linux" },
            { os: "ubuntu-24.04-arm", vcpkg_triplet: "arm64-linux" },
            { os: "ubuntu-24.04-arm", vcpkg_triplet: "arm-linux" },
            { os: "windows-2025", vcpkg_triplet: "x64-mingw-static" },
            { os: "windows-2025", vcpkg_triplet: "x86-mingw-static" },
            { os: "windows-2025", vcpkg_triplet: "arm64-mingw-static" },
            { os: "macos-15", vcpkg_triplet: "arm64-osx" },
            { os: "macos-15", vcpkg_triplet: "x64-osx" },
            { os: "ubuntu-24.04", vcpkg_triplet: "wasm32-emscripten-pic" },
            { os: "ubuntu-24.04", vcpkg_triplet: "x64-android" },
            { os: "ubuntu-24.04", vcpkg_triplet: "x86-android" },
            { os: "ubuntu-24.04", vcpkg_triplet: "arm64-android" },
            { os: "ubuntu-24.04", vcpkg_triplet: "arm-android" },
            { os: "macos-15", vcpkg_triplet: "arm64-ios" },
          ]
        # Note: vcpkg forces building both Debug and Release on a single run. This is not the same as the templates!
        target-type: [ "template_debug" ] # , "template_release"
        float-precision: [ "single" ] # TODO: , "double"

    runs-on: "${{ matrix.target.os }}"
    steps:
      - uses: "actions/checkout@v4"
        with:
          submodules: "recursive"

      # <Triplet-specific setup>
      - if: "matrix.target.vcpkg_triplet == 'x86-linux'"
        run: "sudo apt-get update && sudo apt-get install -y gcc-multilib g++-multilib"
      - if: "matrix.target.vcpkg_triplet == 'arm-linux'"
        run: "sudo apt-get update && sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf && echo \"cmake_extra_args='-DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc', '-DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++'\" >> $GITHUB_ENV"
      - if: "matrix.target.os == 'ubuntu-24.04' || matrix.target.os == 'ubuntu-24.04-arm'"
        run: "sudo apt-get update && sudo apt-get install -y libx11-dev libgl1-mesa-dev libfontconfig-dev"
      - if: "matrix.target.os == 'windows-2025'"
        uses: "egor-tensin/setup-mingw@v2"
        with:
          version: "12.2.0" # It seems like newer versions are broken (follow godot-cpp)
      - if: "matrix.target.os == 'windows-2025'"
        run: "echo 'LDFLAGS=-Wl,-allow-multiple-definition' >> $GITHUB_ENV"
      - if: "matrix.target.os == 'macos-15'"
        run: "brew install autoconf automake autoconf-archive"
      - if: "matrix.target.vcpkg_triplet == 'wasm32-emscripten-pic'"
        uses: "mymindstorm/setup-emsdk@v14"
        with:
          version: "4.0.12" # More recent than Godot's default, since we need allow-multiple-definition support
      - if: "matrix.target.vcpkg_triplet == 'wasm32-emscripten-pic'"
        run: "echo \"cmake_extra_args='-DGODOTCPP_THREADS=OFF'\" >> $GITHUB_ENV && echo 'LDFLAGS=-Wl,-allow-multiple-definition' >> $GITHUB_ENV"
      - if: "contains(matrix.target.vcpkg_triplet, '-android')"
        uses: "nttld/setup-ndk@v1"
        id: "setup-ndk"
        with:
          ndk-version: "r23c" # Same as https://github.com/godotengine/godot/blob/<GODOT_VERSION>/platform/android/detect.py
          link-to-sdk: true
      - if: "contains(matrix.target.vcpkg_triplet, '-android')"
        run: "echo \"ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}\" >> $GITHUB_ENV"  # && echo \"cmake_extra_args='-DANDROID_ABI=${{ matrix.target.cmake_sys_proc }}', '-UCMAKE_SYSTEM_PROCESSOR'\"
      # </Triplet-specific setup>

      # <Use previous build artifacts as a cache (hack to have more storage space, for up to 90 days)>
      - shell: "bash"
        run: |
          set -ex
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          last_workflow_id=$(gh run list --workflow="${{ github.workflow }}" --branch="${{ github.ref_name }}" --status=completed --json databaseId --limit 1 --jq '.[0].databaseId')
          gh run download "$last_workflow_id" --name "build-${{ matrix.target.vcpkg_triplet }}-${{ matrix.target-type }}-${{ matrix.float-precision }}" || \
              echo "::warning ::Failed to download and extract previous build artifacts, skipping cache..."
      # </Use previous build artifacts as a cache>

      # <Install and build>
      - shell: "bash"
        run: | # HACK: Customize the vcpkg install of the main repo package with custom CMAKE_ARGS
          export __OPENCASCADE_GD_CMAKE_ARGS="-DGODOTCPP_TARGET=${{ matrix.target-type }} -DGODOTCPP_PRECISION=${{ matrix.float_precision }} ${{ env.cmake_extra_args }}"
          "$VCPKG_ROOT/bootstrap-vcpkg${{matrix.target.os == 'windows-2025' && '.bat' || '.sh'}}"
          "$VCPKG_ROOT/vcpkg${{matrix.target.os == 'windows-2025' && '.exe' || ''}}" remove opencascade-gd --classic || true  # Avoid caching too much
          "$VCPKG_ROOT/vcpkg${{matrix.target.os == 'windows-2025' && '.exe' || ''}}" install opencascade-gd --classic
        env:
          VCPKG_ROOT: "vcpkg"
          VCPKG_DISABLE_METRICS: "1"
          VCPKG_TARGET_TRIPLET: "${{ matrix.target.vcpkg_triplet }}"
          VCPKG_OVERLAY_TRIPLETS: "vcpkg_triplets"
          VCPKG_OVERLAY_PORTS: "vcpkg_ports"
      # </Install and build>

      # <Export artifacts>
      - uses: "actions/upload-artifact@v4"
        with:
          name: "OpenCASCADE.gd-${{ matrix.target.vcpkg_triplet }}-${{ matrix.target-type }}-${{ matrix.float-precision }}"
          path: "demo/addons/OpenCASCADE.gd/**"
      - uses: "actions/upload-artifact@v4"
        if: "always()"
        with: # Build artifacts useful for debugging in a local environment
          name: "build-${{ matrix.target.vcpkg_triplet }}-${{ matrix.target-type }}-${{ matrix.float-precision }}"
          path: ".vcpkg-cache\n./vcpkg/installed/"
      # </Export artifacts>
  merge:
    runs-on: "ubuntu-24.04"
    needs: "build"
    steps:
      - uses: "actions/upload-artifact/merge@v4"
        with:
          name: "OpenCASCADE.gd"
          pattern: "OpenCASCADE.gd-*"
          delete-merged: true